{"ast":null,"code":"import { __awaiter } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, EventEmitter, Component, ChangeDetectionStrategy, Input, Output, Directive, HostListener, Host, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nfunction SwalPortalComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nconst swalProviderToken = new InjectionToken('@sweetalert2/ngx-sweetalert2#swalProvider');\nconst fireOnInitToken = new InjectionToken('@sweetalert2/ngx-sweetalert2#fireOnInit');\nconst dismissOnDestroyToken = new InjectionToken('@sweetalert2/ngx-sweetalert2#dismissOnDestroy');\n\nclass SweetAlert2LoaderService {\n  // Using any because Angular metadata generator does not understand a pure TS type here\n  constructor(swalProvider) {\n    this.swalProvider = swalProvider;\n  }\n\n  get swal() {\n    if (!this.swalPromiseCache) {\n      this.preloadSweetAlertLibrary();\n    }\n\n    return this.swalPromiseCache;\n  }\n\n  preloadSweetAlertLibrary() {\n    if (this.swalPromiseCache) return;\n    const libPromise = isLoader(this.swalProvider) ? this.swalProvider() : Promise.resolve(this.swalProvider);\n    this.swalPromiseCache = libPromise.then(value => isDefaultExport(value) ? value : value.default);\n\n    function isLoader(value) {\n      return typeof value === 'function' && value.version === undefined;\n    }\n\n    function isDefaultExport(value) {\n      return typeof value === 'function';\n    }\n  }\n\n}\n\nSweetAlert2LoaderService.ɵfac = function SweetAlert2LoaderService_Factory(t) {\n  return new (t || SweetAlert2LoaderService)(i0.ɵɵinject(swalProviderToken));\n};\n\nSweetAlert2LoaderService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: SweetAlert2LoaderService,\n  factory: SweetAlert2LoaderService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SweetAlert2LoaderService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [swalProviderToken]\n      }]\n    }];\n  }, null);\n})();\n/**\n * <swal> component. See the README.md for usage.\n *\n * It contains a bunch of @Inputs that have a perfect 1:1 mapping with SweetAlert2 options.\n * Their types are directly coming from SweetAlert2 types defintitions, meaning that ngx-sweetalert2 is tightly coupled\n * to SweetAlert2, but also is type-safe even if both libraries do not evolve in sync.\n *\n * (?) If you want to use an object that declares the SweetAlert2 options all at once rather than many @Inputs,\n *     take a look at [swalOptions], that lets you pass a full {@link SweetAlertOptions} object.\n *\n * (?) If you are reading the TypeScript source of this component, you may think that it's a lot of code.\n *     Be sure that a lot of this code is types and Angular boilerplate. Compiled and minified code is much smaller.\n *     If you are really concerned about performance and/or don't care about the API and its convenient integration\n *     with Angular (notably change detection and transclusion), you may totally use SweetAlert2 natively as well ;)\n *\n * /!\\ Some SweetAlert options aren't @Inputs but @Outputs: `willOpen`, `didOpen`, `didRender`, `willClose`, `didClose`\n *     and `didDestroy`.\n *     However, `preConfirm`, `preDeny` and `inputValidator` are still @Inputs because they are not event handlers,\n *     there can't be multiple listeners on them, and we need the values they can/must return.\n */\n\n\nclass SwalComponent {\n  constructor(sweetAlert2Loader, moduleLevelFireOnInit, moduleLevelDismissOnDestroy) {\n    this.sweetAlert2Loader = sweetAlert2Loader;\n    this.moduleLevelFireOnInit = moduleLevelFireOnInit;\n    this.moduleLevelDismissOnDestroy = moduleLevelDismissOnDestroy;\n    /**\n     * Modal lifecycle hook. Synchronously runs before the modal is shown on screen.\n     */\n\n    this.willOpen = new EventEmitter();\n    /**\n     * Modal lifecycle hook. Synchronously runs before the modal is shown on screen.\n     */\n\n    this.didOpen = new EventEmitter();\n    /**\n     * Modal lifecycle hook. Synchronously runs after the popup DOM has been updated (ie. just before the modal is\n     * repainted on the screen).\n     * Typically, this will happen after `Swal.fire()` or `Swal.update()`.\n     * If you want to perform changes in the popup's DOM, that survive `Swal.update()`, prefer {@link didRender} over\n     * {@link willOpen}.\n     */\n\n    this.didRender = new EventEmitter();\n    /**\n     * Modal lifecycle hook. Synchronously runs when the popup closes by user interaction (and not due to another popup\n     * being fired).\n     */\n\n    this.willClose = new EventEmitter();\n    /**\n     * Modal lifecycle hook. Asynchronously runs after the popup has been disposed by user interaction (and not due to\n     * another popup being fired).\n     */\n\n    this.didClose = new EventEmitter();\n    /**\n     * Modal lifecycle hook. Synchronously runs after popup has been destroyed either by user interaction or by another\n     * popup.\n     * If you have cleanup operations that you need to reliably execute each time a modal is closed, prefer\n     * {@link didDestroy} over {@link didClose}.\n     */\n\n    this.didDestroy = new EventEmitter();\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * The event value ($event) can be either:\n     *  - by default, just `true`,\n     *  - when using {@link input}, the input value,\n     *  - when using {@link preConfirm}, the return value of this function.\n     *\n     * Example:\n     *     <swal (confirm)=\"handleConfirm($event)\"></swal>\n     *\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n\n    this.confirm = new EventEmitter();\n    /**\n     * Emits when the user clicks \"Deny\".\n     * This event bears no value.\n     * Use `(deny)` (along with {@link showDenyButton}) when you want a modal with three buttons (confirm, deny and\n     * cancel), and/or when you want to handle clear refusal in a separate way than simple dismissal.\n     *\n     * Example:\n     *     <swal (deny)=\"handleDeny()\"></swal>\n     *\n     *     public handleDeny(): void {\n     *     }\n     */\n\n    this.deny = new EventEmitter();\n    /**\n     * Emits when the user clicks \"Cancel\", or dismisses the modal by any other allowed way.\n     * The event value ($event) is a string that explains how the modal was dismissed. It is `undefined` when\n     * the modal was programmatically closed (through {@link close} for example).\n     *\n     * Example:\n     *     <swal (dismiss)=\"handleDismiss($event)\"></swal>\n     *\n     *     public handleDismiss(reason: DismissReason | undefined): void {\n     *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.\n     *         // ... do something\n     *     }\n     */\n\n    this.dismiss = new EventEmitter();\n    /**\n     * This Set retains the properties that have been changed from @Inputs, so we can know precisely\n     * what options we have to send to {@link Swal.fire}.\n     */\n\n    this.touchedProps = new Set();\n    /**\n     * A function of signature `(propName: string): void` that adds a given property name to the list of\n     * touched properties, ie. {@link touchedProps}.\n     */\n\n    this.markTouched = this.touchedProps.add.bind(this.touchedProps);\n    /**\n     * Is the SweetAlert2 modal represented by this component currently opened?\n     */\n\n    this.isCurrentlyShown = false;\n  }\n  /**\n   * An object of SweetAlert2 native options, useful if:\n   *  - you don't want to use the @Inputs for practical/philosophical reasons ;\n   *  - there are missing @Inputs because ngx-sweetalert2 isn't up-to-date with SweetAlert2's latest changes.\n   *\n   * /!\\ Please note that setting this property does NOT erase what has been set before unless you specify the\n   *     previous properties you want to erase again.\n   *     Ie. setting { title: 'Title' } and then { text: 'Text' } will give { title: 'Title', text: 'Text' }.\n   *\n   * /!\\ Be aware that the options defined in this object will override the @Inputs of the same name.\n   */\n\n\n  set swalOptions(options) {\n    //=> Update properties\n    Object.assign(this, options); //=> Mark changed properties as touched\n\n    const touchedKeys = Object.keys(options);\n    touchedKeys.forEach(this.markTouched);\n  }\n  /**\n   * Computes the options object that will get passed to SweetAlert2.\n   * Only the properties that have been set at least once on this component will be returned.\n   * Mostly for internal usage.\n   */\n\n\n  get swalOptions() {\n    //=> We will compute the options object based on the option keys that are known to have changed.\n    //   That avoids passing a gigantic object to SweetAlert2, making debugging easier and potentially\n    //   avoiding side effects.\n    return [...this.touchedProps].reduce((obj, key) => Object.assign(Object.assign({}, obj), {\n      [key]: this[key]\n    }), {});\n  }\n\n  set swalVisible(visible) {\n    visible ? this.fire() : this.close();\n  }\n\n  get swalVisible() {\n    return this.isCurrentlyShown;\n  }\n  /**\n   * Angular lifecycle hook.\n   * Asks the SweetAlert2 loader service to preload the SweetAlert2 library, so it begins to be loaded only if there\n   * is a <swal> component somewhere, and is probably fully loaded when the modal has to be displayed,\n   * causing no delay.\n   */\n\n\n  ngOnInit() {\n    //=> Preload SweetAlert2 library in case this component is activated.\n    this.sweetAlert2Loader.preloadSweetAlertLibrary();\n  }\n  /**\n   * Angular lifecycle hook.\n   * Fires the modal, if the component or module is configured to do so.\n   */\n\n\n  ngAfterViewInit() {\n    const fireOnInit = this.swalFireOnInit === undefined ? this.moduleLevelFireOnInit : this.swalFireOnInit;\n    fireOnInit && this.fire();\n  }\n  /**\n   * Angular lifecycle hook.\n   * Updates the SweetAlert options, and if the modal is opened, asks SweetAlert to render it again.\n   */\n\n\n  ngOnChanges(changes) {\n    //=> For each changed @Input that matches a SweetAlert2 option, mark as touched so we can\n    //   send it with the next fire() or update() calls.\n    Object.keys(changes) //=> If the filtering logic becomes more complex here, we can use Swal.isValidParameter\n    .filter(key => !key.startsWith('swal')).forEach(this.markTouched); //=> Eventually trigger re-render if the modal is open.\n\n    void this.update();\n  }\n  /**\n   * Angular lifecycle hook.\n   * Closes the SweetAlert when the component is destroyed.\n   */\n\n\n  ngOnDestroy() {\n    //=> Release the modal if the component is destroyed and if that behaviour is not disabled.\n    const dismissOnDestroy = this.swalDismissOnDestroy === undefined ? this.moduleLevelDismissOnDestroy : this.swalDismissOnDestroy;\n    dismissOnDestroy && this.close();\n  }\n  /**\n   * Shows the SweetAlert.\n   *\n   * Returns the SweetAlert2 promise for convenience and use in code behind templates.\n   * Otherwise, (confirm)=\"myHandler($event)\" and (dismiss)=\"myHandler($event)\" can be used in templates.\n   */\n\n\n  fire() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const swal = yield this.sweetAlert2Loader.swal;\n      const userOptions = this.swalOptions; //=> Build the SweetAlert2 options\n\n      const options = Object.assign(Object.assign({}, userOptions), {\n        //=> Handle modal lifecycle events\n        willOpen: composeHook(userOptions.willOpen, modalElement => {\n          this.willOpen.emit({\n            modalElement\n          });\n        }),\n        didOpen: composeHook(userOptions.didOpen, modalElement => {\n          this.isCurrentlyShown = true;\n          this.didOpen.emit({\n            modalElement\n          });\n        }),\n        didRender: composeHook(userOptions.didRender, modalElement => {\n          this.didRender.emit({\n            modalElement\n          });\n        }),\n        willClose: composeHook(userOptions.willClose, modalElement => {\n          this.isCurrentlyShown = false;\n          this.willClose.emit({\n            modalElement\n          });\n        }),\n        didClose: composeHook(userOptions.didClose, () => {\n          this.didClose.emit();\n        }),\n        didDestroy: composeHook(userOptions.didDestroy, () => {\n          this.didDestroy.emit();\n        })\n      }); //=> Show the Swal! And wait for confirmation or dimissal.\n\n      const result = yield swal.fire(options); //=> Emit on (confirm), (deny) or (dismiss)\n\n      switch (true) {\n        case result.isConfirmed:\n          this.confirm.emit(result.value);\n          break;\n\n        case result.isDenied:\n          this.deny.emit();\n          break;\n\n        case result.isDismissed:\n          this.dismiss.emit(result.dismiss);\n          break;\n      }\n\n      return result;\n\n      function composeHook(userHook, libHook) {\n        return (...args) => (libHook(...args), userHook === null || userHook === void 0 ? void 0 : userHook(...args));\n      }\n    });\n  }\n  /**\n   * Closes the modal, if opened.\n   *\n   * @param result The value that the modal will resolve with, triggering either (confirm), (deny) or (dismiss).\n   *               If the argument is not passed, it is (dismiss) that will emit an `undefined` reason.\n   *               {@see Swal.close}.\n   */\n\n\n  close(result) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.isCurrentlyShown) return;\n      const swal = yield this.sweetAlert2Loader.swal;\n      swal.close(result);\n    });\n  }\n  /**\n   * Updates SweetAlert2 options while the modal is opened, causing the modal to re-render.\n   * If the modal is not opened, the component options will simply be updated and that's it.\n   *\n   * /!\\ Please note that not all SweetAlert2 options are updatable while the modal is opened.\n   *\n   * @param options\n   */\n\n\n  update(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (options) {\n        this.swalOptions = options;\n      }\n\n      if (!this.isCurrentlyShown) return;\n      const swal = yield this.sweetAlert2Loader.swal;\n      const allOptions = this.swalOptions;\n      const updatableOptions = Object.keys(allOptions).filter(swal.isUpdatableParameter).reduce((obj, key) => Object.assign(Object.assign({}, obj), {\n        [key]: allOptions[key]\n      }), {});\n      swal.update(updatableOptions);\n    });\n  }\n\n}\n\nSwalComponent.ɵfac = function SwalComponent_Factory(t) {\n  return new (t || SwalComponent)(i0.ɵɵdirectiveInject(SweetAlert2LoaderService), i0.ɵɵdirectiveInject(fireOnInitToken), i0.ɵɵdirectiveInject(dismissOnDestroyToken));\n};\n\nSwalComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: SwalComponent,\n  selectors: [[\"swal\"]],\n  inputs: {\n    title: \"title\",\n    titleText: \"titleText\",\n    text: \"text\",\n    html: \"html\",\n    footer: \"footer\",\n    icon: \"icon\",\n    iconColor: \"iconColor\",\n    iconHtml: \"iconHtml\",\n    backdrop: \"backdrop\",\n    toast: \"toast\",\n    target: \"target\",\n    input: \"input\",\n    width: \"width\",\n    padding: \"padding\",\n    background: \"background\",\n    position: \"position\",\n    grow: \"grow\",\n    showClass: \"showClass\",\n    hideClass: \"hideClass\",\n    customClass: \"customClass\",\n    timer: \"timer\",\n    timerProgressBar: \"timerProgressBar\",\n    heightAuto: \"heightAuto\",\n    allowOutsideClick: \"allowOutsideClick\",\n    allowEscapeKey: \"allowEscapeKey\",\n    allowEnterKey: \"allowEnterKey\",\n    stopKeydownPropagation: \"stopKeydownPropagation\",\n    keydownListenerCapture: \"keydownListenerCapture\",\n    showConfirmButton: \"showConfirmButton\",\n    showDenyButton: \"showDenyButton\",\n    showCancelButton: \"showCancelButton\",\n    confirmButtonText: \"confirmButtonText\",\n    denyButtonText: \"denyButtonText\",\n    cancelButtonText: \"cancelButtonText\",\n    confirmButtonColor: \"confirmButtonColor\",\n    denyButtonColor: \"denyButtonColor\",\n    cancelButtonColor: \"cancelButtonColor\",\n    confirmButtonAriaLabel: \"confirmButtonAriaLabel\",\n    denyButtonAriaLabel: \"denyButtonAriaLabel\",\n    cancelButtonAriaLabel: \"cancelButtonAriaLabel\",\n    buttonsStyling: \"buttonsStyling\",\n    reverseButtons: \"reverseButtons\",\n    focusConfirm: \"focusConfirm\",\n    focusDeny: \"focusDeny\",\n    focusCancel: \"focusCancel\",\n    showCloseButton: \"showCloseButton\",\n    closeButtonHtml: \"closeButtonHtml\",\n    closeButtonAriaLabel: \"closeButtonAriaLabel\",\n    loaderHtml: \"loaderHtml\",\n    showLoaderOnConfirm: \"showLoaderOnConfirm\",\n    preConfirm: \"preConfirm\",\n    preDeny: \"preDeny\",\n    imageUrl: \"imageUrl\",\n    imageWidth: \"imageWidth\",\n    imageHeight: \"imageHeight\",\n    imageAlt: \"imageAlt\",\n    inputLabel: \"inputLabel\",\n    inputPlaceholder: \"inputPlaceholder\",\n    inputValue: \"inputValue\",\n    inputOptions: \"inputOptions\",\n    inputAutoTrim: \"inputAutoTrim\",\n    inputAttributes: \"inputAttributes\",\n    inputValidator: \"inputValidator\",\n    returnInputValueOnDeny: \"returnInputValueOnDeny\",\n    validationMessage: \"validationMessage\",\n    progressSteps: \"progressSteps\",\n    currentProgressStep: \"currentProgressStep\",\n    progressStepsDistance: \"progressStepsDistance\",\n    scrollbarPadding: \"scrollbarPadding\",\n    swalOptions: \"swalOptions\",\n    swalFireOnInit: \"swalFireOnInit\",\n    swalDismissOnDestroy: \"swalDismissOnDestroy\",\n    swalVisible: \"swalVisible\"\n  },\n  outputs: {\n    willOpen: \"willOpen\",\n    didOpen: \"didOpen\",\n    didRender: \"didRender\",\n    willClose: \"willClose\",\n    didClose: \"didClose\",\n    didDestroy: \"didDestroy\",\n    confirm: \"confirm\",\n    deny: \"deny\",\n    dismiss: \"dismiss\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 0,\n  vars: 0,\n  template: function SwalComponent_Template(rf, ctx) {},\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SwalComponent, [{\n    type: Component,\n    args: [{\n      selector: 'swal',\n      template: '',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: SweetAlert2LoaderService\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [fireOnInitToken]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [dismissOnDestroyToken]\n      }]\n    }];\n  }, {\n    title: [{\n      type: Input\n    }],\n    titleText: [{\n      type: Input\n    }],\n    text: [{\n      type: Input\n    }],\n    html: [{\n      type: Input\n    }],\n    footer: [{\n      type: Input\n    }],\n    icon: [{\n      type: Input\n    }],\n    iconColor: [{\n      type: Input\n    }],\n    iconHtml: [{\n      type: Input\n    }],\n    backdrop: [{\n      type: Input\n    }],\n    toast: [{\n      type: Input\n    }],\n    target: [{\n      type: Input\n    }],\n    input: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    padding: [{\n      type: Input\n    }],\n    background: [{\n      type: Input\n    }],\n    position: [{\n      type: Input\n    }],\n    grow: [{\n      type: Input\n    }],\n    showClass: [{\n      type: Input\n    }],\n    hideClass: [{\n      type: Input\n    }],\n    customClass: [{\n      type: Input\n    }],\n    timer: [{\n      type: Input\n    }],\n    timerProgressBar: [{\n      type: Input\n    }],\n    heightAuto: [{\n      type: Input\n    }],\n    allowOutsideClick: [{\n      type: Input\n    }],\n    allowEscapeKey: [{\n      type: Input\n    }],\n    allowEnterKey: [{\n      type: Input\n    }],\n    stopKeydownPropagation: [{\n      type: Input\n    }],\n    keydownListenerCapture: [{\n      type: Input\n    }],\n    showConfirmButton: [{\n      type: Input\n    }],\n    showDenyButton: [{\n      type: Input\n    }],\n    showCancelButton: [{\n      type: Input\n    }],\n    confirmButtonText: [{\n      type: Input\n    }],\n    denyButtonText: [{\n      type: Input\n    }],\n    cancelButtonText: [{\n      type: Input\n    }],\n    confirmButtonColor: [{\n      type: Input\n    }],\n    denyButtonColor: [{\n      type: Input\n    }],\n    cancelButtonColor: [{\n      type: Input\n    }],\n    confirmButtonAriaLabel: [{\n      type: Input\n    }],\n    denyButtonAriaLabel: [{\n      type: Input\n    }],\n    cancelButtonAriaLabel: [{\n      type: Input\n    }],\n    buttonsStyling: [{\n      type: Input\n    }],\n    reverseButtons: [{\n      type: Input\n    }],\n    focusConfirm: [{\n      type: Input\n    }],\n    focusDeny: [{\n      type: Input\n    }],\n    focusCancel: [{\n      type: Input\n    }],\n    showCloseButton: [{\n      type: Input\n    }],\n    closeButtonHtml: [{\n      type: Input\n    }],\n    closeButtonAriaLabel: [{\n      type: Input\n    }],\n    loaderHtml: [{\n      type: Input\n    }],\n    showLoaderOnConfirm: [{\n      type: Input\n    }],\n    preConfirm: [{\n      type: Input\n    }],\n    preDeny: [{\n      type: Input\n    }],\n    imageUrl: [{\n      type: Input\n    }],\n    imageWidth: [{\n      type: Input\n    }],\n    imageHeight: [{\n      type: Input\n    }],\n    imageAlt: [{\n      type: Input\n    }],\n    inputLabel: [{\n      type: Input\n    }],\n    inputPlaceholder: [{\n      type: Input\n    }],\n    inputValue: [{\n      type: Input\n    }],\n    inputOptions: [{\n      type: Input\n    }],\n    inputAutoTrim: [{\n      type: Input\n    }],\n    inputAttributes: [{\n      type: Input\n    }],\n    inputValidator: [{\n      type: Input\n    }],\n    returnInputValueOnDeny: [{\n      type: Input\n    }],\n    validationMessage: [{\n      type: Input\n    }],\n    progressSteps: [{\n      type: Input\n    }],\n    currentProgressStep: [{\n      type: Input\n    }],\n    progressStepsDistance: [{\n      type: Input\n    }],\n    scrollbarPadding: [{\n      type: Input\n    }],\n    swalOptions: [{\n      type: Input\n    }],\n    swalFireOnInit: [{\n      type: Input\n    }],\n    swalDismissOnDestroy: [{\n      type: Input\n    }],\n    swalVisible: [{\n      type: Input\n    }],\n    willOpen: [{\n      type: Output\n    }],\n    didOpen: [{\n      type: Output\n    }],\n    didRender: [{\n      type: Output\n    }],\n    willClose: [{\n      type: Output\n    }],\n    didClose: [{\n      type: Output\n    }],\n    didDestroy: [{\n      type: Output\n    }],\n    confirm: [{\n      type: Output\n    }],\n    deny: [{\n      type: Output\n    }],\n    dismiss: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * [swal] directive. It takes a value that defines the SweetAlert and can be of three types:\n *\n * 1) A simple array of two or three strings defining [title, text, icon] - the icon being optional, ex:\n *\n *    <button [swal]=\"['Title', 'Text']\">Click me</button>\n *\n * 2) A native SweetAlert2 options object, ex:\n *\n *    <button [swal]=\"{ title: 'Title', text: 'Text' }\">Click me</button>\n *\n * 3) A reference to an existing SwalComponent instance for more advanced uses, ex:\n *\n *    <button [swal]=\"mySwal\">Click me</button>\n *    <swal #mySwal title=\"Title\" text=\"Text\"></swal>\n */\n\n\nclass SwalDirective {\n  constructor(viewContainerRef, resolver) {\n    this.viewContainerRef = viewContainerRef;\n    this.resolver = resolver;\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * The event value ($event) can be either:\n     *  - by default, just `true`,\n     *  - when using {@link input}, the input value,\n     *  - when using {@link preConfirm}, the return value of this function.\n     *\n     * Example:\n     *     <swal (confirm)=\"handleConfirm($event)\"></swal>\n     *\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n\n    this.confirm = new EventEmitter();\n    /**\n     * Emits when the user clicks \"Deny\".\n     * This event bears no value.\n     * Use `(deny)` (along with {@link showDenyButton}) when you want a modal with three buttons (confirm, deny and\n     * cancel), and/or when you want to handle clear refusal in a separate way than simple dismissal.\n     *\n     * Example:\n     *     <swal (deny)=\"handleDeny()\"></swal>\n     *\n     *     public handleDeny(): void {\n     *     }\n     */\n\n    this.deny = new EventEmitter();\n    /**\n     * Emits when the user clicks \"Cancel\", or dismisses the modal by any other allowed way.\n     * The event value ($event) is a string that explains how the modal was dismissed. It is `undefined` when\n     * the modal was programmatically closed (through {@link dismiss} for example).\n     *\n     * Example:\n     *     <swal (dismiss)=\"handleDismiss($event)\"></swal>\n     *\n     *     public handleDismiss(reason: DismissReason | undefined): void {\n     *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.\n     *         // ... do something\n     *     }\n     */\n\n    this.dismiss = new EventEmitter();\n  }\n  /**\n   * SweetAlert2 options or a SwalComponent instance.\n   * See the class doc block for more informations.\n   */\n\n\n  set swal(options) {\n    if (options instanceof SwalComponent) {\n      this.swalInstance = options;\n    } else if (isArrayOptions(options)) {\n      this.swalOptions = {};\n      [this.swalOptions.title, this.swalOptions.text, this.swalOptions.icon] = options;\n    } else {\n      this.swalOptions = options;\n    }\n\n    function isArrayOptions(value) {\n      return Array.isArray(options);\n    }\n  }\n  /**\n   * OnInit lifecycle handler.\n   * Creates a SwalComponent instance if the user didn't provided one and binds on that component (confirm),\n   * (deny) and (dismiss) outputs to reemit on the directive.\n   */\n\n\n  ngOnInit() {\n    if (!this.swalInstance) {\n      const factory = this.resolver.resolveComponentFactory(SwalComponent);\n      this.swalRef = this.viewContainerRef.createComponent(factory);\n      this.swalInstance = this.swalRef.instance;\n    }\n  }\n  /**\n   * OnDestroy lifecycle handler.\n   * Destroys the dynamically-created SwalComponent.\n   */\n\n\n  ngOnDestroy() {\n    if (this.swalRef) {\n      this.swalRef.destroy();\n    }\n  }\n  /**\n   * Click handler.\n   * The directive listens for onclick events on its host element.\n   * When this happens, it shows the <swal> attached to this directive.\n   */\n\n\n  onClick(event) {\n    event.preventDefault();\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n    if (!this.swalInstance) return;\n\n    if (this.swalOptions) {\n      this.swalInstance.swalOptions = this.swalOptions;\n    }\n\n    const swalClosed = new Subject();\n    this.swalInstance.confirm.asObservable().pipe(takeUntil(swalClosed)).subscribe(v => this.confirm.emit(v));\n    this.swalInstance.deny.asObservable().pipe(takeUntil(swalClosed)).subscribe(v => this.deny.emit(v));\n    this.swalInstance.dismiss.asObservable().pipe(takeUntil(swalClosed)).subscribe(v => this.dismiss.emit(v));\n    this.swalInstance.fire().then(() => swalClosed.next());\n  }\n\n}\n\nSwalDirective.ɵfac = function SwalDirective_Factory(t) {\n  return new (t || SwalDirective)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver));\n};\n\nSwalDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: SwalDirective,\n  selectors: [[\"\", \"swal\", \"\"]],\n  hostBindings: function SwalDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function SwalDirective_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      });\n    }\n  },\n  inputs: {\n    swal: \"swal\"\n  },\n  outputs: {\n    confirm: \"confirm\",\n    deny: \"deny\",\n    dismiss: \"dismiss\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SwalDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[swal]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.ComponentFactoryResolver\n    }];\n  }, {\n    swal: [{\n      type: Input\n    }],\n    confirm: [{\n      type: Output\n    }],\n    deny: [{\n      type: Output\n    }],\n    dismiss: [{\n      type: Output\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }]\n  });\n})();\n/**\n * @internal\n * Holds a consumer's Angular template and displays it on a Sweet Alert.\n * See SwalPortalDirective for info about the covered feature.\n */\n\n\nclass SwalPortalComponent {\n  constructor() {\n    this.template = null;\n  }\n\n}\n\nSwalPortalComponent.ɵfac = function SwalPortalComponent_Factory(t) {\n  return new (t || SwalPortalComponent)();\n};\n\nSwalPortalComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: SwalPortalComponent,\n  selectors: [[\"swal-portal\"]],\n  inputs: {\n    template: \"template\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[4, \"ngTemplateOutlet\"]],\n  template: function SwalPortalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, SwalPortalComponent_ng_container_0_Template, 1, 0, \"ng-container\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.template);\n    }\n  },\n  directives: [i1.NgTemplateOutlet],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SwalPortalComponent, [{\n    type: Component,\n    args: [{\n      selector: 'swal-portal',\n      template: '<ng-container *ngTemplateOutlet=\"template\"></ng-container>',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    template: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Represents an object of targets for <swal> portals (use with *swalPortal directive).\n * We must use thunks to access the Swal.* functions listed below, because they get created after the first modal is\n * shown, so this object lets us reference those functions safely and in a statically-typed manner.\n */\n\n\nclass SwalPortalTargets {\n  constructor() {\n    /**\n     * Targets the modal close button block contents.\n     */\n    this.closeButton = {\n      element: swal => swal.getCloseButton(),\n      options: {\n        showCloseButton: true\n      }\n    };\n    /**\n     * Targets the modal title block contents.\n     */\n\n    this.title = {\n      element: swal => swal.getTitle(),\n      // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n      options: {\n        title: ' '\n      }\n    };\n    /**\n     * Targets the modal text block contents (that is another block inside the first content block, so you can still\n     * use other modal features like Swal inputs, that are situated inside that parent content block).\n     */\n\n    this.content = {\n      element: swal => swal.getHtmlContainer(),\n      // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n      options: {\n        text: ' '\n      }\n    };\n    /**\n     * Targets the actions block contents, where are the confirm and cancel buttons in a normal time.\n     * /!\\ WARNING: using this target destroys some of the native SweetAlert2 modal's DOM, therefore, if you use this\n     *     target, do not update the modal via <swal> @Inputs while the modal is open, or you'll get an error.\n     *     We could workaround that inconvenient inside this integration, but that'd be detrimental to memory and\n     *     performance of everyone, for a relatively rare use case.\n     */\n\n    this.actions = {\n      element: swal => swal.getActions(),\n      // The button will never exist, but SweetAlert2 shows the actions block only if there is at least one button.\n      options: {\n        showConfirmButton: true\n      }\n    };\n    /**\n     * Targets the confirm button contents, replacing the text inside it (not the button itself)\n     */\n\n    this.confirmButton = {\n      element: swal => swal.getConfirmButton(),\n      options: {\n        showConfirmButton: true\n      }\n    };\n    /**\n     * Targets the deny button contents, replacing the text inside it (not the button itself)\n     */\n\n    this.denyButton = {\n      element: swal => swal.getDenyButton(),\n      options: {\n        showDenyButton: true\n      }\n    };\n    /**\n     * Targets the cancel button contents, replacing the text inside it (not the button itself)\n     */\n\n    this.cancelButton = {\n      element: swal => swal.getCancelButton(),\n      options: {\n        showCancelButton: true\n      }\n    };\n    /**\n     * Targets the modal footer contents.\n     */\n\n    this.footer = {\n      element: swal => swal.getFooter(),\n      // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n      options: {\n        footer: ' '\n      }\n    };\n  }\n\n}\n\nSwalPortalTargets.ɵfac = function SwalPortalTargets_Factory(t) {\n  return new (t || SwalPortalTargets)();\n};\n\nSwalPortalTargets.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: SwalPortalTargets,\n  factory: SwalPortalTargets.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SwalPortalTargets, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\n * A structural directive that lets you use Angular templates inside of SweetAlerts.\n * There are different targetable zones provided by {@link SwalPortalTargets}: title, content, confirmButton, etc, but\n * you can also make your own target by implementing {@link SwalPortalTarget} and giving it to this directive.\n * The default target is the alert text content zone.\n *\n * Usage in your component's TypeScript (if you use another target than {@link SwalPortalTargets.content}):\n *\n *     @Component({ ... })\n *     export class MyComponent {\n *         public constructor(public readonly swalTargets: SwalPortalTargets) {\n *         }\n *     }\n *\n * Usage in the template:\n *\n *     <swal title=\"Fill the form\" (confirm)=\"confirmHandler()\">\n *         <!-- This form will be displayed as the alert main content\n *              Targets the alert's main content zone by default -->\n *         <form *swalPortal [formControl]=\"myForm\">\n *             ...\n *         </form>\n *\n *         <!-- This targets the confirm button's inner content\n *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->\n *         <ng-container *swalPortal=\"swalTargets.confirmButton\">\n *              Send ({{ secondsLeft }} seconds left)\n *         </ng-container>\n *     <swal>\n */\n\n\nclass SwalPortalDirective {\n  constructor(resolver, injector, app, templateRef, sweetAlert2Loader, swalTargets, swalComponent) {\n    this.resolver = resolver;\n    this.injector = injector;\n    this.app = app;\n    this.templateRef = templateRef;\n    this.sweetAlert2Loader = sweetAlert2Loader;\n    this.swalTargets = swalTargets;\n    this.swalComponent = swalComponent;\n    this.destroyed = new Subject();\n  }\n  /**\n   * Subscribes to the the SweetAlert appearance/disappearance events to create/destroy the SwalPortalComponent\n   * that will receive the consumer's template.\n   */\n\n\n  ngOnInit() {\n    // Can't be set in a default property value, if the customer lets *swalPortal empty, the value we get is undef.\n    this.target = this.target || this.swalTargets.content; //=> Apply the options provided by the target definition\n\n    void this.swalComponent.update(this.target.options); //=> Subscribe to a few hooks frm the parent SwalComponent.\n\n    this.swalComponent.didRender.pipe(takeUntil(this.destroyed)).subscribe(this.didRenderHook.bind(this));\n    this.swalComponent.willOpen.pipe(takeUntil(this.destroyed)).subscribe(this.willOpenHook.bind(this));\n    this.swalComponent.didDestroy.pipe(takeUntil(this.destroyed)).subscribe(this.didDestroyHook.bind(this));\n  }\n  /**\n   * Signal any {@link destroyed} consumer that this is over, so they can unsubscribe from the\n   * parent SwalComponent events.\n   */\n\n\n  ngOnDestroy() {\n    this.destroyed.next();\n  }\n  /**\n   * This didRender hook runs 1..n times (per modal instance), just before the modal is shown (and also before the\n   * {@link willOpenHook}), or after Swal.update() is called.\n   * This is a good place to render, or re-render, our portal contents.\n   */\n\n\n  didRenderHook() {\n    return __awaiter(this, void 0, void 0, function* () {\n      //=> Ensure the portal component is created\n      if (!this.portalComponentRef) {\n        this.portalComponentRef = this.createPortalComponent();\n      } //=> SweetAlert2 created the modal or just erased all of our content, so we need to install/reinstall it.\n      // Swal.update() is synchronous, this observable too, and mountComponentOnTarget too (the promise inside\n      // this function is already resolved at this point), so the whole process of re-rendering and re-mounting\n      // the portal component is fully synchronous, causing no blinks in the modal contents.\n\n\n      const swal = yield this.sweetAlert2Loader.swal; //=> Find target element\n\n      const targetEl = this.target.element(swal);\n      if (!targetEl) return; //=> Replace target's contents with our component\n      // https://jsperf.com/innerhtml-vs-removechild/15\n\n      while (targetEl.firstChild) {\n        targetEl.removeChild(targetEl.firstChild);\n      }\n\n      targetEl.appendChild(this.portalComponentRef.location.nativeElement);\n    });\n  }\n  /**\n   * This willOpen hook runs once (per modal instance), just before the modal is shown on the screen.\n   * This is a good place to declare our detached view to the Angular app.\n   */\n\n\n  willOpenHook() {\n    if (!this.portalComponentRef) return; //=> Make the Angular app aware of that detached view so rendering and change detection can happen\n\n    this.app.attachView(this.portalComponentRef.hostView);\n  }\n  /**\n   * This didDestroy hook runs once (per modal instance), just after the modal closing animation terminated.\n   * This is a good place to detach and destroy our content, that is not visible anymore.\n   */\n\n\n  didDestroyHook() {\n    if (!this.portalComponentRef) return; //=> Detach the portal component from the app and destroy it\n\n    this.app.detachView(this.portalComponentRef.hostView);\n    this.portalComponentRef.destroy();\n    this.portalComponentRef = void 0;\n  }\n  /**\n   * Creates the {@link SwalPortalComponent} and gives it the customer's template ref.\n   */\n\n\n  createPortalComponent() {\n    //=> Create the SwalPortalComponent that will hold our content\n    const factory = this.resolver.resolveComponentFactory(SwalPortalComponent); // Yes, we do not use the third argument that would directly use the target as the component's view\n    // (unfortunately, because that would give a cleaner DOM and would avoid dirty and direct DOM manipulations)\n    // That's because we want to keep our component safe from SweetAlert2's operations on the DOM, and to be\n    // able to restore it at any moment, ie. after the modal has been re-rendered.\n\n    const componentRef = factory.create(this.injector, []); //=> Apply the consumer's template on the component\n\n    componentRef.instance.template = this.templateRef;\n    return componentRef;\n  }\n\n}\n\nSwalPortalDirective.ɵfac = function SwalPortalDirective_Factory(t) {\n  return new (t || SwalPortalDirective)(i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i0.ApplicationRef), i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(SweetAlert2LoaderService), i0.ɵɵdirectiveInject(SwalPortalTargets), i0.ɵɵdirectiveInject(SwalComponent, 1));\n};\n\nSwalPortalDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: SwalPortalDirective,\n  selectors: [[\"\", \"swalPortal\", \"\"]],\n  inputs: {\n    target: [\"swalPortal\", \"target\"]\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SwalPortalDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[swalPortal]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ComponentFactoryResolver\n    }, {\n      type: i0.Injector\n    }, {\n      type: i0.ApplicationRef\n    }, {\n      type: i0.TemplateRef\n    }, {\n      type: SweetAlert2LoaderService\n    }, {\n      type: SwalPortalTargets\n    }, {\n      type: SwalComponent,\n      decorators: [{\n        type: Host\n      }]\n    }];\n  }, {\n    target: [{\n      type: Input,\n      args: ['swalPortal']\n    }]\n  });\n})();\n\nfunction provideDefaultSwal() {\n  return import('sweetalert2');\n}\n\nclass SweetAlert2Module {\n  static forRoot(options = {}) {\n    return {\n      ngModule: SweetAlert2Module,\n      providers: [SweetAlert2LoaderService, {\n        provide: swalProviderToken,\n        useValue: options.provideSwal || provideDefaultSwal\n      }, {\n        provide: fireOnInitToken,\n        useValue: options.fireOnInit || false\n      }, {\n        provide: dismissOnDestroyToken,\n        useValue: options.dismissOnDestroy || true\n      }]\n    };\n  }\n\n  static forChild(options = {}) {\n    return {\n      ngModule: SweetAlert2Module,\n      providers: [...(options.provideSwal ? [SweetAlert2LoaderService, {\n        provide: swalProviderToken,\n        useValue: options.provideSwal\n      }] : []), ...(options.fireOnInit !== undefined ? [{\n        provide: fireOnInitToken,\n        useValue: options.fireOnInit\n      }] : []), ...(options.dismissOnDestroy !== undefined ? [{\n        provide: dismissOnDestroyToken,\n        useValue: options.dismissOnDestroy\n      }] : [])]\n    };\n  }\n\n}\n\nSweetAlert2Module.ɵfac = function SweetAlert2Module_Factory(t) {\n  return new (t || SweetAlert2Module)();\n};\n\nSweetAlert2Module.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: SweetAlert2Module\n});\nSweetAlert2Module.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SweetAlert2Module, [{\n    type: NgModule,\n    args: [{\n      declarations: [SwalDirective, SwalComponent, SwalPortalDirective, SwalPortalComponent],\n      imports: [CommonModule],\n      exports: [SwalComponent, SwalPortalDirective, SwalDirective]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { SwalComponent, SwalDirective, SwalPortalDirective, SwalPortalTargets, SweetAlert2LoaderService, SweetAlert2Module };","map":{"version":3,"sources":["D:/Development/infinity-sat/sat-ui/node_modules/@sweetalert2/ngx-sweetalert2/fesm2015/sweetalert2-ngx-sweetalert2.mjs"],"names":["__awaiter","i0","InjectionToken","Injectable","Inject","EventEmitter","Component","ChangeDetectionStrategy","Input","Output","Directive","HostListener","Host","NgModule","Subject","takeUntil","i1","CommonModule","swalProviderToken","fireOnInitToken","dismissOnDestroyToken","SweetAlert2LoaderService","constructor","swalProvider","swal","swalPromiseCache","preloadSweetAlertLibrary","libPromise","isLoader","Promise","resolve","then","value","isDefaultExport","default","version","undefined","ɵfac","ɵprov","type","decorators","args","SwalComponent","sweetAlert2Loader","moduleLevelFireOnInit","moduleLevelDismissOnDestroy","willOpen","didOpen","didRender","willClose","didClose","didDestroy","confirm","deny","dismiss","touchedProps","Set","markTouched","add","bind","isCurrentlyShown","swalOptions","options","Object","assign","touchedKeys","keys","forEach","reduce","obj","key","swalVisible","visible","fire","close","ngOnInit","ngAfterViewInit","fireOnInit","swalFireOnInit","ngOnChanges","changes","filter","startsWith","update","ngOnDestroy","dismissOnDestroy","swalDismissOnDestroy","userOptions","composeHook","modalElement","emit","result","isConfirmed","isDenied","isDismissed","userHook","libHook","allOptions","updatableOptions","isUpdatableParameter","ɵcmp","selector","template","changeDetection","OnPush","title","titleText","text","html","footer","icon","iconColor","iconHtml","backdrop","toast","target","input","width","padding","background","position","grow","showClass","hideClass","customClass","timer","timerProgressBar","heightAuto","allowOutsideClick","allowEscapeKey","allowEnterKey","stopKeydownPropagation","keydownListenerCapture","showConfirmButton","showDenyButton","showCancelButton","confirmButtonText","denyButtonText","cancelButtonText","confirmButtonColor","denyButtonColor","cancelButtonColor","confirmButtonAriaLabel","denyButtonAriaLabel","cancelButtonAriaLabel","buttonsStyling","reverseButtons","focusConfirm","focusDeny","focusCancel","showCloseButton","closeButtonHtml","closeButtonAriaLabel","loaderHtml","showLoaderOnConfirm","preConfirm","preDeny","imageUrl","imageWidth","imageHeight","imageAlt","inputLabel","inputPlaceholder","inputValue","inputOptions","inputAutoTrim","inputAttributes","inputValidator","returnInputValueOnDeny","validationMessage","progressSteps","currentProgressStep","progressStepsDistance","scrollbarPadding","SwalDirective","viewContainerRef","resolver","swalInstance","isArrayOptions","Array","isArray","factory","resolveComponentFactory","swalRef","createComponent","instance","destroy","onClick","event","preventDefault","stopImmediatePropagation","stopPropagation","swalClosed","asObservable","pipe","subscribe","v","next","ViewContainerRef","ComponentFactoryResolver","ɵdir","SwalPortalComponent","NgTemplateOutlet","SwalPortalTargets","closeButton","element","getCloseButton","getTitle","content","getHtmlContainer","actions","getActions","confirmButton","getConfirmButton","denyButton","getDenyButton","cancelButton","getCancelButton","getFooter","providedIn","SwalPortalDirective","injector","app","templateRef","swalTargets","swalComponent","destroyed","didRenderHook","willOpenHook","didDestroyHook","portalComponentRef","createPortalComponent","targetEl","firstChild","removeChild","appendChild","location","nativeElement","attachView","hostView","detachView","componentRef","create","Injector","ApplicationRef","TemplateRef","provideDefaultSwal","SweetAlert2Module","forRoot","ngModule","providers","provide","useValue","provideSwal","forChild","ɵmod","ɵinj","declarations","imports","exports"],"mappings":"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","sourcesContent":["import { __awaiter } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, EventEmitter, Component, ChangeDetectionStrategy, Input, Output, Directive, HostListener, Host, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nconst swalProviderToken = new InjectionToken('@sweetalert2/ngx-sweetalert2#swalProvider');\nconst fireOnInitToken = new InjectionToken('@sweetalert2/ngx-sweetalert2#fireOnInit');\nconst dismissOnDestroyToken = new InjectionToken('@sweetalert2/ngx-sweetalert2#dismissOnDestroy');\n\nclass SweetAlert2LoaderService {\n    // Using any because Angular metadata generator does not understand a pure TS type here\n    constructor(swalProvider) {\n        this.swalProvider = swalProvider;\n    }\n    get swal() {\n        if (!this.swalPromiseCache) {\n            this.preloadSweetAlertLibrary();\n        }\n        return this.swalPromiseCache;\n    }\n    preloadSweetAlertLibrary() {\n        if (this.swalPromiseCache)\n            return;\n        const libPromise = isLoader(this.swalProvider)\n            ? this.swalProvider()\n            : Promise.resolve(this.swalProvider);\n        this.swalPromiseCache = libPromise.then(value => isDefaultExport(value) ? value : value.default);\n        function isLoader(value) {\n            return typeof value === 'function' && value.version === undefined;\n        }\n        function isDefaultExport(value) {\n            return typeof value === 'function';\n        }\n    }\n}\nSweetAlert2LoaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: SweetAlert2LoaderService, deps: [{ token: swalProviderToken }], target: i0.ɵɵFactoryTarget.Injectable });\nSweetAlert2LoaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: SweetAlert2LoaderService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: SweetAlert2LoaderService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [swalProviderToken]\n                    }] }];\n    } });\n\n/**\n * <swal> component. See the README.md for usage.\n *\n * It contains a bunch of @Inputs that have a perfect 1:1 mapping with SweetAlert2 options.\n * Their types are directly coming from SweetAlert2 types defintitions, meaning that ngx-sweetalert2 is tightly coupled\n * to SweetAlert2, but also is type-safe even if both libraries do not evolve in sync.\n *\n * (?) If you want to use an object that declares the SweetAlert2 options all at once rather than many @Inputs,\n *     take a look at [swalOptions], that lets you pass a full {@link SweetAlertOptions} object.\n *\n * (?) If you are reading the TypeScript source of this component, you may think that it's a lot of code.\n *     Be sure that a lot of this code is types and Angular boilerplate. Compiled and minified code is much smaller.\n *     If you are really concerned about performance and/or don't care about the API and its convenient integration\n *     with Angular (notably change detection and transclusion), you may totally use SweetAlert2 natively as well ;)\n *\n * /!\\ Some SweetAlert options aren't @Inputs but @Outputs: `willOpen`, `didOpen`, `didRender`, `willClose`, `didClose`\n *     and `didDestroy`.\n *     However, `preConfirm`, `preDeny` and `inputValidator` are still @Inputs because they are not event handlers,\n *     there can't be multiple listeners on them, and we need the values they can/must return.\n */\nclass SwalComponent {\n    constructor(sweetAlert2Loader, moduleLevelFireOnInit, moduleLevelDismissOnDestroy) {\n        this.sweetAlert2Loader = sweetAlert2Loader;\n        this.moduleLevelFireOnInit = moduleLevelFireOnInit;\n        this.moduleLevelDismissOnDestroy = moduleLevelDismissOnDestroy;\n        /**\n         * Modal lifecycle hook. Synchronously runs before the modal is shown on screen.\n         */\n        this.willOpen = new EventEmitter();\n        /**\n         * Modal lifecycle hook. Synchronously runs before the modal is shown on screen.\n         */\n        this.didOpen = new EventEmitter();\n        /**\n         * Modal lifecycle hook. Synchronously runs after the popup DOM has been updated (ie. just before the modal is\n         * repainted on the screen).\n         * Typically, this will happen after `Swal.fire()` or `Swal.update()`.\n         * If you want to perform changes in the popup's DOM, that survive `Swal.update()`, prefer {@link didRender} over\n         * {@link willOpen}.\n         */\n        this.didRender = new EventEmitter();\n        /**\n         * Modal lifecycle hook. Synchronously runs when the popup closes by user interaction (and not due to another popup\n         * being fired).\n         */\n        this.willClose = new EventEmitter();\n        /**\n         * Modal lifecycle hook. Asynchronously runs after the popup has been disposed by user interaction (and not due to\n         * another popup being fired).\n         */\n        this.didClose = new EventEmitter();\n        /**\n         * Modal lifecycle hook. Synchronously runs after popup has been destroyed either by user interaction or by another\n         * popup.\n         * If you have cleanup operations that you need to reliably execute each time a modal is closed, prefer\n         * {@link didDestroy} over {@link didClose}.\n         */\n        this.didDestroy = new EventEmitter();\n        /**\n         * Emits when the user clicks \"Confirm\".\n         * The event value ($event) can be either:\n         *  - by default, just `true`,\n         *  - when using {@link input}, the input value,\n         *  - when using {@link preConfirm}, the return value of this function.\n         *\n         * Example:\n         *     <swal (confirm)=\"handleConfirm($event)\"></swal>\n         *\n         *     public handleConfirm(email: string): void {\n         *         // ... save user email\n         *     }\n         */\n        this.confirm = new EventEmitter();\n        /**\n         * Emits when the user clicks \"Deny\".\n         * This event bears no value.\n         * Use `(deny)` (along with {@link showDenyButton}) when you want a modal with three buttons (confirm, deny and\n         * cancel), and/or when you want to handle clear refusal in a separate way than simple dismissal.\n         *\n         * Example:\n         *     <swal (deny)=\"handleDeny()\"></swal>\n         *\n         *     public handleDeny(): void {\n         *     }\n         */\n        this.deny = new EventEmitter();\n        /**\n         * Emits when the user clicks \"Cancel\", or dismisses the modal by any other allowed way.\n         * The event value ($event) is a string that explains how the modal was dismissed. It is `undefined` when\n         * the modal was programmatically closed (through {@link close} for example).\n         *\n         * Example:\n         *     <swal (dismiss)=\"handleDismiss($event)\"></swal>\n         *\n         *     public handleDismiss(reason: DismissReason | undefined): void {\n         *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.\n         *         // ... do something\n         *     }\n         */\n        this.dismiss = new EventEmitter();\n        /**\n         * This Set retains the properties that have been changed from @Inputs, so we can know precisely\n         * what options we have to send to {@link Swal.fire}.\n         */\n        this.touchedProps = new Set();\n        /**\n         * A function of signature `(propName: string): void` that adds a given property name to the list of\n         * touched properties, ie. {@link touchedProps}.\n         */\n        this.markTouched = this.touchedProps.add.bind(this.touchedProps);\n        /**\n         * Is the SweetAlert2 modal represented by this component currently opened?\n         */\n        this.isCurrentlyShown = false;\n    }\n    /**\n     * An object of SweetAlert2 native options, useful if:\n     *  - you don't want to use the @Inputs for practical/philosophical reasons ;\n     *  - there are missing @Inputs because ngx-sweetalert2 isn't up-to-date with SweetAlert2's latest changes.\n     *\n     * /!\\ Please note that setting this property does NOT erase what has been set before unless you specify the\n     *     previous properties you want to erase again.\n     *     Ie. setting { title: 'Title' } and then { text: 'Text' } will give { title: 'Title', text: 'Text' }.\n     *\n     * /!\\ Be aware that the options defined in this object will override the @Inputs of the same name.\n     */\n    set swalOptions(options) {\n        //=> Update properties\n        Object.assign(this, options);\n        //=> Mark changed properties as touched\n        const touchedKeys = Object.keys(options);\n        touchedKeys.forEach(this.markTouched);\n    }\n    /**\n     * Computes the options object that will get passed to SweetAlert2.\n     * Only the properties that have been set at least once on this component will be returned.\n     * Mostly for internal usage.\n     */\n    get swalOptions() {\n        //=> We will compute the options object based on the option keys that are known to have changed.\n        //   That avoids passing a gigantic object to SweetAlert2, making debugging easier and potentially\n        //   avoiding side effects.\n        return [...this.touchedProps].reduce((obj, key) => (Object.assign(Object.assign({}, obj), { [key]: this[key] })), {});\n    }\n    set swalVisible(visible) {\n        visible ? this.fire() : this.close();\n    }\n    get swalVisible() {\n        return this.isCurrentlyShown;\n    }\n    /**\n     * Angular lifecycle hook.\n     * Asks the SweetAlert2 loader service to preload the SweetAlert2 library, so it begins to be loaded only if there\n     * is a <swal> component somewhere, and is probably fully loaded when the modal has to be displayed,\n     * causing no delay.\n     */\n    ngOnInit() {\n        //=> Preload SweetAlert2 library in case this component is activated.\n        this.sweetAlert2Loader.preloadSweetAlertLibrary();\n    }\n    /**\n     * Angular lifecycle hook.\n     * Fires the modal, if the component or module is configured to do so.\n     */\n    ngAfterViewInit() {\n        const fireOnInit = this.swalFireOnInit === undefined\n            ? this.moduleLevelFireOnInit\n            : this.swalFireOnInit;\n        fireOnInit && this.fire();\n    }\n    /**\n     * Angular lifecycle hook.\n     * Updates the SweetAlert options, and if the modal is opened, asks SweetAlert to render it again.\n     */\n    ngOnChanges(changes) {\n        //=> For each changed @Input that matches a SweetAlert2 option, mark as touched so we can\n        //   send it with the next fire() or update() calls.\n        Object.keys(changes)\n            //=> If the filtering logic becomes more complex here, we can use Swal.isValidParameter\n            .filter((key) => !key.startsWith('swal'))\n            .forEach(this.markTouched);\n        //=> Eventually trigger re-render if the modal is open.\n        void this.update();\n    }\n    /**\n     * Angular lifecycle hook.\n     * Closes the SweetAlert when the component is destroyed.\n     */\n    ngOnDestroy() {\n        //=> Release the modal if the component is destroyed and if that behaviour is not disabled.\n        const dismissOnDestroy = this.swalDismissOnDestroy === undefined\n            ? this.moduleLevelDismissOnDestroy\n            : this.swalDismissOnDestroy;\n        dismissOnDestroy && this.close();\n    }\n    /**\n     * Shows the SweetAlert.\n     *\n     * Returns the SweetAlert2 promise for convenience and use in code behind templates.\n     * Otherwise, (confirm)=\"myHandler($event)\" and (dismiss)=\"myHandler($event)\" can be used in templates.\n     */\n    fire() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const swal = yield this.sweetAlert2Loader.swal;\n            const userOptions = this.swalOptions;\n            //=> Build the SweetAlert2 options\n            const options = Object.assign(Object.assign({}, userOptions), { \n                //=> Handle modal lifecycle events\n                willOpen: composeHook(userOptions.willOpen, (modalElement) => {\n                    this.willOpen.emit({ modalElement });\n                }), didOpen: composeHook(userOptions.didOpen, (modalElement) => {\n                    this.isCurrentlyShown = true;\n                    this.didOpen.emit({ modalElement });\n                }), didRender: composeHook(userOptions.didRender, (modalElement) => {\n                    this.didRender.emit({ modalElement });\n                }), willClose: composeHook(userOptions.willClose, (modalElement) => {\n                    this.isCurrentlyShown = false;\n                    this.willClose.emit({ modalElement });\n                }), didClose: composeHook(userOptions.didClose, () => {\n                    this.didClose.emit();\n                }), didDestroy: composeHook(userOptions.didDestroy, () => {\n                    this.didDestroy.emit();\n                }) });\n            //=> Show the Swal! And wait for confirmation or dimissal.\n            const result = yield swal.fire(options);\n            //=> Emit on (confirm), (deny) or (dismiss)\n            switch (true) {\n                case result.isConfirmed:\n                    this.confirm.emit(result.value);\n                    break;\n                case result.isDenied:\n                    this.deny.emit();\n                    break;\n                case result.isDismissed:\n                    this.dismiss.emit(result.dismiss);\n                    break;\n            }\n            return result;\n            function composeHook(userHook, libHook) {\n                return (...args) => (libHook(...args), userHook === null || userHook === void 0 ? void 0 : userHook(...args));\n            }\n        });\n    }\n    /**\n     * Closes the modal, if opened.\n     *\n     * @param result The value that the modal will resolve with, triggering either (confirm), (deny) or (dismiss).\n     *               If the argument is not passed, it is (dismiss) that will emit an `undefined` reason.\n     *               {@see Swal.close}.\n     */\n    close(result) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.isCurrentlyShown)\n                return;\n            const swal = yield this.sweetAlert2Loader.swal;\n            swal.close(result);\n        });\n    }\n    /**\n     * Updates SweetAlert2 options while the modal is opened, causing the modal to re-render.\n     * If the modal is not opened, the component options will simply be updated and that's it.\n     *\n     * /!\\ Please note that not all SweetAlert2 options are updatable while the modal is opened.\n     *\n     * @param options\n     */\n    update(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (options) {\n                this.swalOptions = options;\n            }\n            if (!this.isCurrentlyShown)\n                return;\n            const swal = yield this.sweetAlert2Loader.swal;\n            const allOptions = this.swalOptions;\n            const updatableOptions = Object.keys(allOptions)\n                .filter(swal.isUpdatableParameter)\n                .reduce((obj, key) => (Object.assign(Object.assign({}, obj), { [key]: allOptions[key] })), {});\n            swal.update(updatableOptions);\n        });\n    }\n}\nSwalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: SwalComponent, deps: [{ token: SweetAlert2LoaderService }, { token: fireOnInitToken }, { token: dismissOnDestroyToken }], target: i0.ɵɵFactoryTarget.Component });\nSwalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.4\", type: SwalComponent, selector: \"swal\", inputs: { title: \"title\", titleText: \"titleText\", text: \"text\", html: \"html\", footer: \"footer\", icon: \"icon\", iconColor: \"iconColor\", iconHtml: \"iconHtml\", backdrop: \"backdrop\", toast: \"toast\", target: \"target\", input: \"input\", width: \"width\", padding: \"padding\", background: \"background\", position: \"position\", grow: \"grow\", showClass: \"showClass\", hideClass: \"hideClass\", customClass: \"customClass\", timer: \"timer\", timerProgressBar: \"timerProgressBar\", heightAuto: \"heightAuto\", allowOutsideClick: \"allowOutsideClick\", allowEscapeKey: \"allowEscapeKey\", allowEnterKey: \"allowEnterKey\", stopKeydownPropagation: \"stopKeydownPropagation\", keydownListenerCapture: \"keydownListenerCapture\", showConfirmButton: \"showConfirmButton\", showDenyButton: \"showDenyButton\", showCancelButton: \"showCancelButton\", confirmButtonText: \"confirmButtonText\", denyButtonText: \"denyButtonText\", cancelButtonText: \"cancelButtonText\", confirmButtonColor: \"confirmButtonColor\", denyButtonColor: \"denyButtonColor\", cancelButtonColor: \"cancelButtonColor\", confirmButtonAriaLabel: \"confirmButtonAriaLabel\", denyButtonAriaLabel: \"denyButtonAriaLabel\", cancelButtonAriaLabel: \"cancelButtonAriaLabel\", buttonsStyling: \"buttonsStyling\", reverseButtons: \"reverseButtons\", focusConfirm: \"focusConfirm\", focusDeny: \"focusDeny\", focusCancel: \"focusCancel\", showCloseButton: \"showCloseButton\", closeButtonHtml: \"closeButtonHtml\", closeButtonAriaLabel: \"closeButtonAriaLabel\", loaderHtml: \"loaderHtml\", showLoaderOnConfirm: \"showLoaderOnConfirm\", preConfirm: \"preConfirm\", preDeny: \"preDeny\", imageUrl: \"imageUrl\", imageWidth: \"imageWidth\", imageHeight: \"imageHeight\", imageAlt: \"imageAlt\", inputLabel: \"inputLabel\", inputPlaceholder: \"inputPlaceholder\", inputValue: \"inputValue\", inputOptions: \"inputOptions\", inputAutoTrim: \"inputAutoTrim\", inputAttributes: \"inputAttributes\", inputValidator: \"inputValidator\", returnInputValueOnDeny: \"returnInputValueOnDeny\", validationMessage: \"validationMessage\", progressSteps: \"progressSteps\", currentProgressStep: \"currentProgressStep\", progressStepsDistance: \"progressStepsDistance\", scrollbarPadding: \"scrollbarPadding\", swalOptions: \"swalOptions\", swalFireOnInit: \"swalFireOnInit\", swalDismissOnDestroy: \"swalDismissOnDestroy\", swalVisible: \"swalVisible\" }, outputs: { willOpen: \"willOpen\", didOpen: \"didOpen\", didRender: \"didRender\", willClose: \"willClose\", didClose: \"didClose\", didDestroy: \"didDestroy\", confirm: \"confirm\", deny: \"deny\", dismiss: \"dismiss\" }, usesOnChanges: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: SwalComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'swal',\n                    template: '',\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () {\n        return [{ type: SweetAlert2LoaderService }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [fireOnInitToken]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [dismissOnDestroyToken]\n                    }] }];\n    }, propDecorators: { title: [{\n                type: Input\n            }], titleText: [{\n                type: Input\n            }], text: [{\n                type: Input\n            }], html: [{\n                type: Input\n            }], footer: [{\n                type: Input\n            }], icon: [{\n                type: Input\n            }], iconColor: [{\n                type: Input\n            }], iconHtml: [{\n                type: Input\n            }], backdrop: [{\n                type: Input\n            }], toast: [{\n                type: Input\n            }], target: [{\n                type: Input\n            }], input: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], padding: [{\n                type: Input\n            }], background: [{\n                type: Input\n            }], position: [{\n                type: Input\n            }], grow: [{\n                type: Input\n            }], showClass: [{\n                type: Input\n            }], hideClass: [{\n                type: Input\n            }], customClass: [{\n                type: Input\n            }], timer: [{\n                type: Input\n            }], timerProgressBar: [{\n                type: Input\n            }], heightAuto: [{\n                type: Input\n            }], allowOutsideClick: [{\n                type: Input\n            }], allowEscapeKey: [{\n                type: Input\n            }], allowEnterKey: [{\n                type: Input\n            }], stopKeydownPropagation: [{\n                type: Input\n            }], keydownListenerCapture: [{\n                type: Input\n            }], showConfirmButton: [{\n                type: Input\n            }], showDenyButton: [{\n                type: Input\n            }], showCancelButton: [{\n                type: Input\n            }], confirmButtonText: [{\n                type: Input\n            }], denyButtonText: [{\n                type: Input\n            }], cancelButtonText: [{\n                type: Input\n            }], confirmButtonColor: [{\n                type: Input\n            }], denyButtonColor: [{\n                type: Input\n            }], cancelButtonColor: [{\n                type: Input\n            }], confirmButtonAriaLabel: [{\n                type: Input\n            }], denyButtonAriaLabel: [{\n                type: Input\n            }], cancelButtonAriaLabel: [{\n                type: Input\n            }], buttonsStyling: [{\n                type: Input\n            }], reverseButtons: [{\n                type: Input\n            }], focusConfirm: [{\n                type: Input\n            }], focusDeny: [{\n                type: Input\n            }], focusCancel: [{\n                type: Input\n            }], showCloseButton: [{\n                type: Input\n            }], closeButtonHtml: [{\n                type: Input\n            }], closeButtonAriaLabel: [{\n                type: Input\n            }], loaderHtml: [{\n                type: Input\n            }], showLoaderOnConfirm: [{\n                type: Input\n            }], preConfirm: [{\n                type: Input\n            }], preDeny: [{\n                type: Input\n            }], imageUrl: [{\n                type: Input\n            }], imageWidth: [{\n                type: Input\n            }], imageHeight: [{\n                type: Input\n            }], imageAlt: [{\n                type: Input\n            }], inputLabel: [{\n                type: Input\n            }], inputPlaceholder: [{\n                type: Input\n            }], inputValue: [{\n                type: Input\n            }], inputOptions: [{\n                type: Input\n            }], inputAutoTrim: [{\n                type: Input\n            }], inputAttributes: [{\n                type: Input\n            }], inputValidator: [{\n                type: Input\n            }], returnInputValueOnDeny: [{\n                type: Input\n            }], validationMessage: [{\n                type: Input\n            }], progressSteps: [{\n                type: Input\n            }], currentProgressStep: [{\n                type: Input\n            }], progressStepsDistance: [{\n                type: Input\n            }], scrollbarPadding: [{\n                type: Input\n            }], swalOptions: [{\n                type: Input\n            }], swalFireOnInit: [{\n                type: Input\n            }], swalDismissOnDestroy: [{\n                type: Input\n            }], swalVisible: [{\n                type: Input\n            }], willOpen: [{\n                type: Output\n            }], didOpen: [{\n                type: Output\n            }], didRender: [{\n                type: Output\n            }], willClose: [{\n                type: Output\n            }], didClose: [{\n                type: Output\n            }], didDestroy: [{\n                type: Output\n            }], confirm: [{\n                type: Output\n            }], deny: [{\n                type: Output\n            }], dismiss: [{\n                type: Output\n            }] } });\n\n/**\n * [swal] directive. It takes a value that defines the SweetAlert and can be of three types:\n *\n * 1) A simple array of two or three strings defining [title, text, icon] - the icon being optional, ex:\n *\n *    <button [swal]=\"['Title', 'Text']\">Click me</button>\n *\n * 2) A native SweetAlert2 options object, ex:\n *\n *    <button [swal]=\"{ title: 'Title', text: 'Text' }\">Click me</button>\n *\n * 3) A reference to an existing SwalComponent instance for more advanced uses, ex:\n *\n *    <button [swal]=\"mySwal\">Click me</button>\n *    <swal #mySwal title=\"Title\" text=\"Text\"></swal>\n */\nclass SwalDirective {\n    constructor(viewContainerRef, resolver) {\n        this.viewContainerRef = viewContainerRef;\n        this.resolver = resolver;\n        /**\n         * Emits when the user clicks \"Confirm\".\n         * The event value ($event) can be either:\n         *  - by default, just `true`,\n         *  - when using {@link input}, the input value,\n         *  - when using {@link preConfirm}, the return value of this function.\n         *\n         * Example:\n         *     <swal (confirm)=\"handleConfirm($event)\"></swal>\n         *\n         *     public handleConfirm(email: string): void {\n         *         // ... save user email\n         *     }\n         */\n        this.confirm = new EventEmitter();\n        /**\n         * Emits when the user clicks \"Deny\".\n         * This event bears no value.\n         * Use `(deny)` (along with {@link showDenyButton}) when you want a modal with three buttons (confirm, deny and\n         * cancel), and/or when you want to handle clear refusal in a separate way than simple dismissal.\n         *\n         * Example:\n         *     <swal (deny)=\"handleDeny()\"></swal>\n         *\n         *     public handleDeny(): void {\n         *     }\n         */\n        this.deny = new EventEmitter();\n        /**\n         * Emits when the user clicks \"Cancel\", or dismisses the modal by any other allowed way.\n         * The event value ($event) is a string that explains how the modal was dismissed. It is `undefined` when\n         * the modal was programmatically closed (through {@link dismiss} for example).\n         *\n         * Example:\n         *     <swal (dismiss)=\"handleDismiss($event)\"></swal>\n         *\n         *     public handleDismiss(reason: DismissReason | undefined): void {\n         *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.\n         *         // ... do something\n         *     }\n         */\n        this.dismiss = new EventEmitter();\n    }\n    /**\n     * SweetAlert2 options or a SwalComponent instance.\n     * See the class doc block for more informations.\n     */\n    set swal(options) {\n        if (options instanceof SwalComponent) {\n            this.swalInstance = options;\n        }\n        else if (isArrayOptions(options)) {\n            this.swalOptions = {};\n            [this.swalOptions.title, this.swalOptions.text, this.swalOptions.icon] = options;\n        }\n        else {\n            this.swalOptions = options;\n        }\n        function isArrayOptions(value) {\n            return Array.isArray(options);\n        }\n    }\n    /**\n     * OnInit lifecycle handler.\n     * Creates a SwalComponent instance if the user didn't provided one and binds on that component (confirm),\n     * (deny) and (dismiss) outputs to reemit on the directive.\n     */\n    ngOnInit() {\n        if (!this.swalInstance) {\n            const factory = this.resolver.resolveComponentFactory(SwalComponent);\n            this.swalRef = this.viewContainerRef.createComponent(factory);\n            this.swalInstance = this.swalRef.instance;\n        }\n    }\n    /**\n     * OnDestroy lifecycle handler.\n     * Destroys the dynamically-created SwalComponent.\n     */\n    ngOnDestroy() {\n        if (this.swalRef) {\n            this.swalRef.destroy();\n        }\n    }\n    /**\n     * Click handler.\n     * The directive listens for onclick events on its host element.\n     * When this happens, it shows the <swal> attached to this directive.\n     */\n    onClick(event) {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n        event.stopPropagation();\n        if (!this.swalInstance)\n            return;\n        if (this.swalOptions) {\n            this.swalInstance.swalOptions = this.swalOptions;\n        }\n        const swalClosed = new Subject();\n        this.swalInstance.confirm.asObservable().pipe(takeUntil(swalClosed)).subscribe(v => this.confirm.emit(v));\n        this.swalInstance.deny.asObservable().pipe(takeUntil(swalClosed)).subscribe(v => this.deny.emit(v));\n        this.swalInstance.dismiss.asObservable().pipe(takeUntil(swalClosed)).subscribe(v => this.dismiss.emit(v));\n        this.swalInstance.fire().then(() => swalClosed.next());\n    }\n}\nSwalDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: SwalDirective, deps: [{ token: i0.ViewContainerRef }, { token: i0.ComponentFactoryResolver }], target: i0.ɵɵFactoryTarget.Directive });\nSwalDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.4\", type: SwalDirective, selector: \"[swal]\", inputs: { swal: \"swal\" }, outputs: { confirm: \"confirm\", deny: \"deny\", dismiss: \"dismiss\" }, host: { listeners: { \"click\": \"onClick($event)\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: SwalDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[swal]'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ComponentFactoryResolver }]; }, propDecorators: { swal: [{\n                type: Input\n            }], confirm: [{\n                type: Output\n            }], deny: [{\n                type: Output\n            }], dismiss: [{\n                type: Output\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }] } });\n\n/**\n * @internal\n * Holds a consumer's Angular template and displays it on a Sweet Alert.\n * See SwalPortalDirective for info about the covered feature.\n */\nclass SwalPortalComponent {\n    constructor() {\n        this.template = null;\n    }\n}\nSwalPortalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: SwalPortalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nSwalPortalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.4\", type: SwalPortalComponent, selector: \"swal-portal\", inputs: { template: \"template\" }, ngImport: i0, template: '<ng-container *ngTemplateOutlet=\"template\"></ng-container>', isInline: true, directives: [{ type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: SwalPortalComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'swal-portal',\n                    template: '<ng-container *ngTemplateOutlet=\"template\"></ng-container>',\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { template: [{\n                type: Input\n            }] } });\n\n/**\n * Represents an object of targets for <swal> portals (use with *swalPortal directive).\n * We must use thunks to access the Swal.* functions listed below, because they get created after the first modal is\n * shown, so this object lets us reference those functions safely and in a statically-typed manner.\n */\nclass SwalPortalTargets {\n    constructor() {\n        /**\n         * Targets the modal close button block contents.\n         */\n        this.closeButton = {\n            element: swal => swal.getCloseButton(),\n            options: { showCloseButton: true }\n        };\n        /**\n         * Targets the modal title block contents.\n         */\n        this.title = {\n            element: swal => swal.getTitle(),\n            // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n            options: { title: ' ' }\n        };\n        /**\n         * Targets the modal text block contents (that is another block inside the first content block, so you can still\n         * use other modal features like Swal inputs, that are situated inside that parent content block).\n         */\n        this.content = {\n            element: swal => swal.getHtmlContainer(),\n            // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n            options: { text: ' ' }\n        };\n        /**\n         * Targets the actions block contents, where are the confirm and cancel buttons in a normal time.\n         * /!\\ WARNING: using this target destroys some of the native SweetAlert2 modal's DOM, therefore, if you use this\n         *     target, do not update the modal via <swal> @Inputs while the modal is open, or you'll get an error.\n         *     We could workaround that inconvenient inside this integration, but that'd be detrimental to memory and\n         *     performance of everyone, for a relatively rare use case.\n         */\n        this.actions = {\n            element: swal => swal.getActions(),\n            // The button will never exist, but SweetAlert2 shows the actions block only if there is at least one button.\n            options: { showConfirmButton: true }\n        };\n        /**\n         * Targets the confirm button contents, replacing the text inside it (not the button itself)\n         */\n        this.confirmButton = {\n            element: swal => swal.getConfirmButton(),\n            options: { showConfirmButton: true }\n        };\n        /**\n         * Targets the deny button contents, replacing the text inside it (not the button itself)\n         */\n        this.denyButton = {\n            element: swal => swal.getDenyButton(),\n            options: { showDenyButton: true }\n        };\n        /**\n         * Targets the cancel button contents, replacing the text inside it (not the button itself)\n         */\n        this.cancelButton = {\n            element: swal => swal.getCancelButton(),\n            options: { showCancelButton: true }\n        };\n        /**\n         * Targets the modal footer contents.\n         */\n        this.footer = {\n            element: swal => swal.getFooter(),\n            // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n            options: { footer: ' ' }\n        };\n    }\n}\nSwalPortalTargets.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: SwalPortalTargets, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nSwalPortalTargets.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: SwalPortalTargets, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: SwalPortalTargets, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * A structural directive that lets you use Angular templates inside of SweetAlerts.\n * There are different targetable zones provided by {@link SwalPortalTargets}: title, content, confirmButton, etc, but\n * you can also make your own target by implementing {@link SwalPortalTarget} and giving it to this directive.\n * The default target is the alert text content zone.\n *\n * Usage in your component's TypeScript (if you use another target than {@link SwalPortalTargets.content}):\n *\n *     @Component({ ... })\n *     export class MyComponent {\n *         public constructor(public readonly swalTargets: SwalPortalTargets) {\n *         }\n *     }\n *\n * Usage in the template:\n *\n *     <swal title=\"Fill the form\" (confirm)=\"confirmHandler()\">\n *         <!-- This form will be displayed as the alert main content\n *              Targets the alert's main content zone by default -->\n *         <form *swalPortal [formControl]=\"myForm\">\n *             ...\n *         </form>\n *\n *         <!-- This targets the confirm button's inner content\n *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->\n *         <ng-container *swalPortal=\"swalTargets.confirmButton\">\n *              Send ({{ secondsLeft }} seconds left)\n *         </ng-container>\n *     <swal>\n */\nclass SwalPortalDirective {\n    constructor(resolver, injector, app, templateRef, sweetAlert2Loader, swalTargets, swalComponent) {\n        this.resolver = resolver;\n        this.injector = injector;\n        this.app = app;\n        this.templateRef = templateRef;\n        this.sweetAlert2Loader = sweetAlert2Loader;\n        this.swalTargets = swalTargets;\n        this.swalComponent = swalComponent;\n        this.destroyed = new Subject();\n    }\n    /**\n     * Subscribes to the the SweetAlert appearance/disappearance events to create/destroy the SwalPortalComponent\n     * that will receive the consumer's template.\n     */\n    ngOnInit() {\n        // Can't be set in a default property value, if the customer lets *swalPortal empty, the value we get is undef.\n        this.target = this.target || this.swalTargets.content;\n        //=> Apply the options provided by the target definition\n        void this.swalComponent.update(this.target.options);\n        //=> Subscribe to a few hooks frm the parent SwalComponent.\n        this.swalComponent.didRender.pipe(takeUntil(this.destroyed)).subscribe(this.didRenderHook.bind(this));\n        this.swalComponent.willOpen.pipe(takeUntil(this.destroyed)).subscribe(this.willOpenHook.bind(this));\n        this.swalComponent.didDestroy.pipe(takeUntil(this.destroyed)).subscribe(this.didDestroyHook.bind(this));\n    }\n    /**\n     * Signal any {@link destroyed} consumer that this is over, so they can unsubscribe from the\n     * parent SwalComponent events.\n     */\n    ngOnDestroy() {\n        this.destroyed.next();\n    }\n    /**\n     * This didRender hook runs 1..n times (per modal instance), just before the modal is shown (and also before the\n     * {@link willOpenHook}), or after Swal.update() is called.\n     * This is a good place to render, or re-render, our portal contents.\n     */\n    didRenderHook() {\n        return __awaiter(this, void 0, void 0, function* () {\n            //=> Ensure the portal component is created\n            if (!this.portalComponentRef) {\n                this.portalComponentRef = this.createPortalComponent();\n            }\n            //=> SweetAlert2 created the modal or just erased all of our content, so we need to install/reinstall it.\n            // Swal.update() is synchronous, this observable too, and mountComponentOnTarget too (the promise inside\n            // this function is already resolved at this point), so the whole process of re-rendering and re-mounting\n            // the portal component is fully synchronous, causing no blinks in the modal contents.\n            const swal = yield this.sweetAlert2Loader.swal;\n            //=> Find target element\n            const targetEl = this.target.element(swal);\n            if (!targetEl)\n                return;\n            //=> Replace target's contents with our component\n            // https://jsperf.com/innerhtml-vs-removechild/15\n            while (targetEl.firstChild) {\n                targetEl.removeChild(targetEl.firstChild);\n            }\n            targetEl.appendChild(this.portalComponentRef.location.nativeElement);\n        });\n    }\n    /**\n     * This willOpen hook runs once (per modal instance), just before the modal is shown on the screen.\n     * This is a good place to declare our detached view to the Angular app.\n     */\n    willOpenHook() {\n        if (!this.portalComponentRef)\n            return;\n        //=> Make the Angular app aware of that detached view so rendering and change detection can happen\n        this.app.attachView(this.portalComponentRef.hostView);\n    }\n    /**\n     * This didDestroy hook runs once (per modal instance), just after the modal closing animation terminated.\n     * This is a good place to detach and destroy our content, that is not visible anymore.\n     */\n    didDestroyHook() {\n        if (!this.portalComponentRef)\n            return;\n        //=> Detach the portal component from the app and destroy it\n        this.app.detachView(this.portalComponentRef.hostView);\n        this.portalComponentRef.destroy();\n        this.portalComponentRef = void 0;\n    }\n    /**\n     * Creates the {@link SwalPortalComponent} and gives it the customer's template ref.\n     */\n    createPortalComponent() {\n        //=> Create the SwalPortalComponent that will hold our content\n        const factory = this.resolver.resolveComponentFactory(SwalPortalComponent);\n        // Yes, we do not use the third argument that would directly use the target as the component's view\n        // (unfortunately, because that would give a cleaner DOM and would avoid dirty and direct DOM manipulations)\n        // That's because we want to keep our component safe from SweetAlert2's operations on the DOM, and to be\n        // able to restore it at any moment, ie. after the modal has been re-rendered.\n        const componentRef = factory.create(this.injector, []);\n        //=> Apply the consumer's template on the component\n        componentRef.instance.template = this.templateRef;\n        return componentRef;\n    }\n}\nSwalPortalDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: SwalPortalDirective, deps: [{ token: i0.ComponentFactoryResolver }, { token: i0.Injector }, { token: i0.ApplicationRef }, { token: i0.TemplateRef }, { token: SweetAlert2LoaderService }, { token: SwalPortalTargets }, { token: SwalComponent, host: true }], target: i0.ɵɵFactoryTarget.Directive });\nSwalPortalDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.4\", type: SwalPortalDirective, selector: \"[swalPortal]\", inputs: { target: [\"swalPortal\", \"target\"] }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: SwalPortalDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[swalPortal]'\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ComponentFactoryResolver }, { type: i0.Injector }, { type: i0.ApplicationRef }, { type: i0.TemplateRef }, { type: SweetAlert2LoaderService }, { type: SwalPortalTargets }, { type: SwalComponent, decorators: [{\n                        type: Host\n                    }] }];\n    }, propDecorators: { target: [{\n                type: Input,\n                args: ['swalPortal']\n            }] } });\n\nfunction provideDefaultSwal() {\n    return import('sweetalert2');\n}\nclass SweetAlert2Module {\n    static forRoot(options = {}) {\n        return {\n            ngModule: SweetAlert2Module,\n            providers: [\n                SweetAlert2LoaderService,\n                { provide: swalProviderToken, useValue: options.provideSwal || provideDefaultSwal },\n                { provide: fireOnInitToken, useValue: options.fireOnInit || false },\n                { provide: dismissOnDestroyToken, useValue: options.dismissOnDestroy || true }\n            ]\n        };\n    }\n    static forChild(options = {}) {\n        return {\n            ngModule: SweetAlert2Module,\n            providers: [\n                ...options.provideSwal ? [\n                    SweetAlert2LoaderService,\n                    { provide: swalProviderToken, useValue: options.provideSwal }\n                ] : [],\n                ...options.fireOnInit !== undefined ? [\n                    { provide: fireOnInitToken, useValue: options.fireOnInit }\n                ] : [],\n                ...options.dismissOnDestroy !== undefined ? [\n                    { provide: dismissOnDestroyToken, useValue: options.dismissOnDestroy }\n                ] : []\n            ]\n        };\n    }\n}\nSweetAlert2Module.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: SweetAlert2Module, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nSweetAlert2Module.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: SweetAlert2Module, declarations: [SwalDirective, SwalComponent, SwalPortalDirective, SwalPortalComponent], imports: [CommonModule], exports: [SwalComponent, SwalPortalDirective, SwalDirective] });\nSweetAlert2Module.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: SweetAlert2Module, imports: [[\n            CommonModule\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: SweetAlert2Module, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        SwalDirective, SwalComponent, SwalPortalDirective, SwalPortalComponent\n                    ],\n                    imports: [\n                        CommonModule\n                    ],\n                    exports: [\n                        SwalComponent, SwalPortalDirective, SwalDirective\n                    ]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { SwalComponent, SwalDirective, SwalPortalDirective, SwalPortalTargets, SweetAlert2LoaderService, SweetAlert2Module };\n"]},"metadata":{},"sourceType":"module"}